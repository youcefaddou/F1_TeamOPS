model Car {
  id         Int        @id @default(autoincrement())
  chassisNum String
  model      String
  state      String
  teamId     Int
  pilotId    Int
  createdAt  DateTime   @default(now())
  team       Team       @relation(fields: [teamId], references: [id])
  pilot      Member     @relation("PilotCars", fields: [pilotId], references: [id])
  results    Result[]
  incidents  Incident[]
}

model Engine {
  id        Int        @id @default(autoincrement())
  code      String
  state     String
  teamId    Int
  createdAt DateTime   @default(now())
  team      Team       @relation(fields: [teamId], references: [id])
  incidents Incident[]
}

model GrandPrix {
  id        Int        @id @default(autoincrement())
  name      String
  circuit   String
  country   String
  date      DateTime
  results   Result[]
  incidents Incident[]
}

model Incident {
  id          Int        @id @default(autoincrement())
  type        String // exemple: "casse moteur", "sortie de piste"
  description String?
  date        DateTime   @default(now())
  carId       Int?
  engineId    Int?
  partId      Int?
  pilotId     Int?
  teamId      Int
  grandPrixId Int?
  resolved    Boolean    @default(false)
  team        Team       @relation(fields: [teamId], references: [id])
  car         Car?       @relation(fields: [carId], references: [id])
  engine      Engine?    @relation(fields: [engineId], references: [id])
  part        Part?      @relation(fields: [partId], references: [id])
  pilot       Member?    @relation(fields: [pilotId], references: [id])
  grandPrix   GrandPrix? @relation(fields: [grandPrixId], references: [id])
}

model Member {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String     @unique
  password    String // hashé
  role        Role // enum
  teamId      Int
  nationality String?
  age         Int?
  avatarUrl   String?
  createdAt   DateTime   @default(now())
  team        Team       @relation(fields: [teamId], references: [id])
  incidents   Incident[]
  results     Result[]
  cars        Car[]      @relation("PilotCars")
}

enum Role {
  PILOT
  ENGINEER
  MECHANIC
  DIRECTOR
  OTHER
}

model Part {
  id        Int        @id @default(autoincrement())
  reference String
  type      String
  quantity  Int
  teamId    Int
  team      Team       @relation(fields: [teamId], references: [id])
  incidents Incident[]
}

model Result {
  id          Int       @id @default(autoincrement())
  position    Int?
  points      Int?
  pilotId     Int
  carId       Int
  grandPrixId Int
  teamId      Int
  createdAt   DateTime  @default(now())
  pilot       Member    @relation(fields: [pilotId], references: [id])
  car         Car       @relation(fields: [carId], references: [id])
  grandPrix   GrandPrix @relation(fields: [grandPrixId], references: [id])
  team        Team      @relation(fields: [teamId], references: [id])
}

model Team {
  id        Int        @id @default(autoincrement())
  name      String
  country   String
  password  String // hashé
  director  String? // optionnel
  email     String     @unique
  members   Member[]
  cars      Car[]
  engines   Engine[]
  parts     Part[]
  results   Result[]
  incidents Incident[]
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prismaclient"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
